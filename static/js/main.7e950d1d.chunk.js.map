{"version":3,"sources":["cross.svg","machine.ts","use-timer.ts","format-seconds.ts","use-now.ts","Timer.tsx","App.tsx","serviceWorker.ts","update-vh.ts","index.tsx"],"names":["module","exports","machine","Machine","id","initial","context","time","states","idle","timer","under","on","DONE","target","actions","over","invoke","src","interval","pipe","map","Date","now","filter","Number","first","type","START","assign","_context","event","seconds","STOP","useTimer","ms","React","setNow","clock","setInterval","clearInterval","useNow","diff","Math","ceil","Timer","nosleep","NoSleep","App","isFull","setFull","useMachine","devTools","vibrate","window","navigator","fullScreenOn","matchMedia","matches","fullScreenOff","current","send","isIdle","isUnder","isOver","enabled","onChange","className","classNames","onClick","enable","disable","cross","alt","width","height","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","updateVH","document","documentElement","style","setProperty","innerHeight","addEventListener","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e950d1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.e9ec3cec.svg\";","import { Machine, assign } from 'xstate'\nimport { interval } from 'rxjs';\nimport { map, filter, first } from 'rxjs/operators';\n\ninterface AppContext {\n  time: Date | null;\n}\n\nconst timerSrc = (context: AppContext) => (\n  interval(1000 / 60).pipe(\n    map(() => Date.now()),\n    filter((time) => time >= Number(context.time)),\n    first(),\n    map(() => ({ type: 'DONE' })),\n  )\n);\n\nexport const machine = Machine<AppContext>({\n  id: 'machine',\n  initial: 'idle',\n  context: {\n    time: null,\n  },\n  states: {\n    idle: {},\n    timer: {\n      initial: 'under',\n      states: {\n        under: {\n          on: {\n            DONE: {\n              target: 'over',\n              actions: 'vibrate',\n            },\n          },\n        },\n        over: {},\n      },\n      invoke: {\n        src: timerSrc,\n      },\n    },\n  },\n  on: {\n    START: {\n      target: 'timer',\n      actions: [\n        assign({\n          time: (_context, event) => new Date(Date.now() + event.seconds * 1000),\n        }),\n        'fullScreenOn',\n      ],\n    },\n    STOP: {\n      target: 'idle',\n      actions: 'fullScreenOff',\n    },\n  },\n});\n","import { useNow } from './use-now';\r\nimport { formatSeconds } from './format-seconds';\r\n\r\nexport const useTimer = (time: Date) => {\r\n  const now = useNow();\r\n  const diff = Number(time) - now;\r\n  return formatSeconds(diff);\r\n};\r\n","export const formatSeconds = (ms: number) => {\r\n  return Math.ceil(ms / 1000);\r\n};\r\n","import * as React from 'react';\r\n\r\nexport const useNow = (interval = 1000 / 60) => {\r\n  const [now, setNow] = React.useState(Date.now());\r\n\r\n  React.useEffect(() => {\r\n    const clock = setInterval(() => {\r\n      setNow(Date.now());\r\n    }, interval);\r\n    return () => clearInterval(clock);\r\n  }, [interval]);\r\n\r\n  return now;\r\n};\r\n","import * as React from 'react';\r\nimport { useTimer } from './use-timer';\r\n\r\nexport interface Props {\r\n  time: Date;\r\n}\r\n\r\nconst Timer: React.FC<Props> = ({ time }) => {\r\n  const timer = useTimer(time);\r\n  return <>{timer}</>;\r\n};\r\n\r\nexport default Timer;\r\n","import * as React from 'react';\nimport { useMachine } from '@xstate/react'\nimport Fullscreen from 'react-full-screen';\nimport classNames from 'classnames';\nimport NoSleep from 'nosleep.js';\nimport { machine } from './machine';\nimport Timer from './Timer';\nimport cross from './cross.svg';\nimport './App.css';\n\nconst nosleep = new NoSleep();\n\nconst App: React.FC = () => {\n  const [isFull, setFull] = React.useState(false);\n  const [current, send] = useMachine(machine, {\n    devTools: true,\n    actions: {\n      vibrate: () => window.navigator.vibrate(750),\n      fullScreenOn: () => setFull(window.matchMedia('(pointer: coarse)').matches),\n      fullScreenOff: () => setFull(false),\n    },\n  });\n  const isIdle = current.matches('idle');\n  const isUnder = current.matches({ timer: 'under' });\n  const isOver = current.matches({ timer: 'over' });\n  return (\n    <Fullscreen enabled={isFull} onChange={setFull}>\n      <div\n        className={classNames('App', {\n          'App--idle': isIdle,\n          'App--under': isUnder,\n          'App--over': isOver,\n        })}>\n        <div className=\"App-time-buttons\">\n          <button\n            className=\"App-time-button\"\n            type=\"button\"\n            onClick={() => {\n              nosleep.enable();\n              send('START', { seconds: 120 });\n            }}\n          >\n            <span className=\"App-time-button-text\">120</span>\n          </button>\n          <button\n            className=\"App-time-button\"\n            type=\"button\"\n            onClick={() => {\n              nosleep.enable();\n              send('START', { seconds: 90 });\n            }}\n          >\n            <span className=\"App-time-button-text\">90</span>\n          </button>\n          <button\n            className=\"App-time-button\"\n            type=\"button\"\n            onClick={() => {\n              nosleep.enable();\n              send('START', { seconds: 60 });\n            }}\n          >\n            <span className=\"App-time-button-text\">60</span>\n          </button>\n        </div>\n        <div className=\"App-content\">\n          {!isIdle && current.context.time && (\n            <span className=\"App-timer\">\n              <Timer time={current.context.time} />\n            </span>\n          )}\n          <button\n            className=\"App-reset\"\n            type=\"button\"\n            onClick={() => {\n              nosleep.disable();\n              send('STOP');\n            }}>\n            <img className=\"App-reset-icon\" src={cross} alt=\"Stop\" width=\"16\" height=\"16\" />\n          </button>\n        </div>\n      </div>\n    </Fullscreen>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** See https://css-tricks.com/the-trick-to-viewport-units-on-mobile/ */\r\nexport const updateVH = () => document.documentElement.style.setProperty('--vh', window.innerHeight * 0.01 + 'px');\r\n\r\nwindow.addEventListener('resize', updateVH);\r\n\r\nupdateVH();\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './update-vh'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}