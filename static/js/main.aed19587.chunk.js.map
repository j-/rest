{"version":3,"sources":["cross.svg","machine.ts","format-time.ts","App.tsx","use-now.ts","use-previous.ts","serviceWorker.ts","update-vh.ts","index.tsx"],"names":["module","exports","machine","Machine","id","initial","context","time","states","idle","timer","on","START","target","actions","assign","_context","event","Date","now","seconds","STOP","initialState","formatTime","ms","increasing","Math","abs","s","floor","ceil","m","nosleep","NoSleep","localStorage","removeItem","state","JSON","parse","getItem","State","create","err","App","interval","React","setNow","clock","setInterval","clearInterval","useNow","previousNow","value","ref","current","usePrevious","useMachine","devTools","send","service","diff","isIdle","matches","isUnder","isOver","subscribe","setItem","stringify","unsubscribe","window","navigator","vibrate","className","classNames","type","onMouseDown","enable","disable","src","cross","alt","width","height","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","updateVH","document","documentElement","style","setProperty","innerHeight","addEventListener","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,mC,0OCM9BC,EAAUC,YAAoB,CACzCC,GAAI,UACJC,QAAS,OACTC,QAAS,CACPC,KAAM,MAERC,OAAQ,CACNC,KAAM,GACNC,MAAO,IAETC,GAAI,CACFC,MAAO,CACLC,OAAQ,QACRC,QAASC,YAAO,CACdR,KAAM,SAACS,EAAUC,GAAX,OAAqBC,KAAKC,MAAwB,IAAhBF,EAAMG,QAAiB,QAGnEC,KAAM,CACJR,OAAQ,WCxBP,ICcHS,EDdSC,EAAa,SAACC,GAAsC,IAA1BC,EAAyB,uDAAZD,GAAM,EACxDA,EAAKE,KAAKC,IAAIH,GACd,IAAII,EAAIH,EAAaC,KAAKG,MAAML,EAAK,KAAQE,KAAKI,KAAKN,EAAK,KACtDO,EAAIL,KAAKG,MAAMD,EAAI,IAEzB,OADAA,GAAK,GACC,GAAN,OAAUG,EAAV,YAAeH,EAAI,GAAK,IAAM,IAA9B,OAAmCA,I,iBCO/BI,G,MAAU,IAAIC,KAIpB,IACEC,aAAaC,WAAW,cACxB,IAAMC,EAAiDC,KAAKC,MAAMJ,aAAaK,QAAQ,kBAAoB,IAC3GC,IAAMC,OAAOL,GACbd,EAAec,EACf,MAAOM,IAET,IAmGeC,EAnGO,WACpB,IAAMxB,ECtBc,WAA2B,IAA1ByB,EAAyB,uDAAd,IAAO,GAAO,EACxBC,WAAe3B,KAAKC,OADI,mBACvCA,EADuC,KAClC2B,EADkC,KAU9C,OAPAD,aAAgB,WACd,IAAME,EAAQC,aAAY,WACxBF,EAAO5B,KAAKC,SACXyB,GACH,OAAO,kBAAMK,cAAcF,MAC1B,CAACH,IAEGzB,EDYK+B,CAAO,KACbC,EEvBD,SAAwBC,GAG7B,IAAMC,EAAMR,SAAgBO,GAQ5B,OALAP,aAAgB,WACdQ,EAAIC,QAAUF,IACb,CAACA,IAGGC,EAAIC,QFYSC,CAAYpC,GAFN,EAGOqC,qBAAWtD,EAAS,CACnDuD,UAAU,EACVrB,MAAOd,IALiB,mBAGnBgC,EAHmB,KAGVI,EAHU,KAGJC,EAHI,KAOlBpD,EAAS+C,EAAQhD,QAAjBC,KACFqD,EAAgB,OAATrD,EAAgB,KAAOA,EAAOY,EACrC0C,EAASP,EAAQQ,QAAQ,QACzBC,EAAmB,OAATH,EAAgB,KAAOA,EAAO,IACxCI,EAAkB,OAATJ,EAAgB,MAAQG,EAevC,OAdAlB,aAAgB,WAMd,OALqBc,EAAQM,WAAU,SAAC7B,GACtC,IACEF,aAAagC,QAAQ,gBAAiB7B,KAAK8B,UAAU/B,IACrD,MAAOM,QAES0B,cACnB,CAACT,IACJd,aAAgB,WACD,OAATtC,GACAA,EAAO4C,EAAc,KAAQ5C,EAAOY,EAAM,KAC5CkD,OAAOC,UAAUC,QAAQ,OAE1B,CAAChE,EAAMY,EAAKgC,IAEb,uBACEqB,UAAWC,IAAW,MAAO,CAC3B,YAAaZ,EACb,aAAcE,EACd,YAAaC,EACb,YACW,OAATJ,IACEA,GAAQ,OACRA,IAAS,QAIf,uBAAKY,UAAU,oBACb,0BACEA,UAAU,kBACVE,KAAK,SACLC,YAAa,WACX,IACE3C,EAAQ4C,SACR,MAAOlC,IACTgB,EAAK,QAAS,CAAEtC,QAAS,QAG3B,wBAAMoD,UAAU,wBAAwBjD,EAAW,QAErD,0BACEiD,UAAU,kBACVE,KAAK,SACLC,YAAa,WACX,IACE3C,EAAQ4C,SACR,MAAOlC,IACTgB,EAAK,QAAS,CAAEtC,QAAS,OAG3B,wBAAMoD,UAAU,wBAAwBjD,EAAW,OAErD,0BACEiD,UAAU,kBACVE,KAAK,SACLC,YAAa,WACX,IACE3C,EAAQ4C,SACR,MAAOlC,IACTgB,EAAK,QAAS,CAAEtC,QAAS,OAG3B,wBAAMoD,UAAU,wBAAwBjD,EAAW,QAGvD,uBAAKiD,UAAU,gBACXX,GACA,wBAAMW,UAAU,aACJ,OAATZ,GAAkBlC,KAAKC,IAAIiC,GAAQ,MAAYrC,EAAWqC,IAG/D,0BACEY,UAAU,YACVE,KAAK,SACLC,YAAa,WACX,IACE3C,EAAQ6C,UACR,MAAOnC,IACTgB,EAAK,UAEP,uBAAKc,UAAU,iBAAiBM,IAAKC,IAAOC,IAAI,OAAOC,MAAM,KAAKC,OAAO,WGvG7EC,EAAcC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCpB,UAAUqB,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5D,QACfkC,UAAUqB,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCvG1D,IAAMC,EAAW,kBAAMC,SAASC,gBAAgBC,MAAMC,YAAY,OAA6B,IAArBzC,OAAO0C,YAAqB,OAE7G1C,OAAO2C,iBAAiB,SAAUN,GAElCA,ICEAO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASS,eAAe,SFgBnB,SAAkB1B,GACvB,GAA6C,kBAAmBpB,UAAW,CAMzE,GAJkB,IAAI+C,IACpBC,QACAjD,OAAOgB,SAASkC,MAEJC,SAAWnD,OAAOgB,SAASmC,OAIvC,OAGFnD,OAAO2C,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAM6B,QAAN,sBAEPnC,IAgEV,SAAiCM,EAAeC,GAE9C+B,MAAMhC,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5B7B,MAAK,SAAA8B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzD,UAAUqB,cAAcqC,MAAMnC,MAAK,SAAAC,GACjCA,EAAamC,aAAapC,MAAK,WAC7BxB,OAAOgB,SAAS6C,eAKpB1C,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFA8B,CAAwB1C,EAAOC,GAI/BpB,UAAUqB,cAAcqC,MAAMnC,MAAK,WACjCO,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OEzC/BC,K","file":"static/js/main.aed19587.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.e9ec3cec.svg\";","import { Machine, assign } from 'xstate'\n\nexport interface AppContext {\n  time: number | null;\n}\n\nexport const machine = Machine<AppContext>({\n  id: 'machine',\n  initial: 'idle',\n  context: {\n    time: null,\n  },\n  states: {\n    idle: {},\n    timer: {},\n  },\n  on: {\n    START: {\n      target: 'timer',\n      actions: assign({\n        time: (_context, event) => Date.now() + event.seconds * 1000 + 700,\n      }),\n    },\n    STOP: {\n      target: 'idle',\n    },\n  },\n});\n","export const formatTime = (ms: number, increasing = ms >= 0) => {\n  ms = Math.abs(ms);\n  let s = increasing ? Math.floor(ms / 1000) : Math.ceil(ms / 1000);\n  const m = Math.floor(s / 60);\n  s %= 60;\n  return `${m}:${s < 10 ? '0' : ''}${s}`;\n};\n","import * as React from 'react';\nimport { useMachine } from '@xstate/react'\nimport { StateConfig, AnyEventObject, State } from 'xstate';\nimport classNames from 'classnames';\nimport NoSleep from 'nosleep.js';\nimport { machine, AppContext } from './machine';\nimport { useNow } from './use-now';\nimport { usePrevious } from './use-previous';\nimport { formatTime } from './format-time';\nimport cross from './cross.svg';\nimport './App.css';\n\nconst nosleep = new NoSleep();\n\nlet initialState: StateConfig<AppContext, AnyEventObject> | undefined;\n\ntry {\n  localStorage.removeItem('rest/state');\n  const state: StateConfig<AppContext, AnyEventObject> = JSON.parse(localStorage.getItem('rest/state/v2') || '');\n  State.create(state);\n  initialState = state;\n} catch (err) {}\n\nconst App: React.FC = () => {\n  const now = useNow(250);\n  const previousNow = usePrevious(now);\n  const [current, send, service] = useMachine(machine, {\n    devTools: true,\n    state: initialState,\n  });\n  const { time } = current.context;\n  const diff = time === null ? null : time - now;\n  const isIdle = current.matches('idle');\n  const isUnder = diff === null ? null : diff > 1000;\n  const isOver = diff === null ? null : !isUnder;\n  React.useEffect(() => {\n    const subscription = service.subscribe((state) => {\n      try {\n        localStorage.setItem('rest/state/v2', JSON.stringify(state));\n      } catch (err) {}\n    });\n    return subscription.unsubscribe;\n  }, [service]);\n  React.useEffect(() => {\n    if (time === null) return;\n    if (time - previousNow > 1000 && time - now < 1000) {\n      window.navigator.vibrate(750);\n    }\n  }, [time, now, previousNow]);\n  return (\n    <div\n      className={classNames('App', {\n        'App--idle': isIdle,\n        'App--under': isUnder,\n        'App--over': isOver,\n        'App--long': (\n          diff !== null && (\n            diff >= 599000 ||\n            diff <= -600000\n          )\n        ),\n      })}>\n      <div className=\"App-time-buttons\">\n        <button\n          className=\"App-time-button\"\n          type=\"button\"\n          onMouseDown={() => {\n            try {\n              nosleep.enable();\n            } catch (err) {}\n            send('START', { seconds: 120 });\n          }}\n        >\n          <span className=\"App-time-button-text\">{formatTime(120 * 1000)}</span>\n        </button>\n        <button\n          className=\"App-time-button\"\n          type=\"button\"\n          onMouseDown={() => {\n            try {\n              nosleep.enable();\n            } catch (err) {}\n            send('START', { seconds: 90 });\n          }}\n        >\n          <span className=\"App-time-button-text\">{formatTime(90 * 1000)}</span>\n        </button>\n        <button\n          className=\"App-time-button\"\n          type=\"button\"\n          onMouseDown={() => {\n            try {\n              nosleep.enable();\n            } catch (err) {}\n            send('START', { seconds: 60 });\n          }}\n        >\n          <span className=\"App-time-button-text\">{formatTime(60 * 1000)}</span>\n        </button>\n      </div>\n      <div className=\"App-content\">\n        {!isIdle && (\n          <span className=\"App-timer\">\n            {diff !== null && (Math.abs(diff) < 3600000) && formatTime(diff)}\n          </span>\n        )}\n        <button\n          className=\"App-reset\"\n          type=\"button\"\n          onMouseDown={() => {\n            try {\n              nosleep.disable();\n            } catch (err) {}\n            send('STOP');\n          }}>\n          <img className=\"App-reset-icon\" src={cross} alt=\"Stop\" width=\"16\" height=\"16\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\r\n\r\nexport const useNow = (interval = 1000 / 60) => {\r\n  const [now, setNow] = React.useState(Date.now());\r\n\r\n  React.useEffect(() => {\r\n    const clock = setInterval(() => {\r\n      setNow(Date.now());\r\n    }, interval);\r\n    return () => clearInterval(clock);\r\n  }, [interval]);\r\n\r\n  return now;\r\n};\r\n","import * as React from 'react';\r\n\r\nexport function usePrevious<T>(value: T): T {\r\n  // The ref object is a generic container whose current property is mutable ...\r\n  // ... and can hold any value, similar to an instance property on a class\r\n  const ref = React.useRef<T>(value);\r\n\r\n  // Store current value in ref\r\n  React.useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]); // Only re-run if value changes\r\n\r\n  // Return previous value (happens before update in useEffect above)\r\n  return ref.current;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** See https://css-tricks.com/the-trick-to-viewport-units-on-mobile/ */\r\nexport const updateVH = () => document.documentElement.style.setProperty('--vh', window.innerHeight * 0.01 + 'px');\r\n\r\nwindow.addEventListener('resize', updateVH);\r\n\r\nupdateVH();\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './update-vh'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}