{"version":3,"sources":["cross.svg","machine.ts","use-now.ts","format-time.ts","Timer.tsx","use-timer.ts","App.tsx","serviceWorker.ts","update-vh.ts","index.tsx"],"names":["module","exports","machine","Machine","id","initial","context","time","states","idle","timer","under","on","DONE","target","actions","over","invoke","src","interval","pipe","map","Date","now","filter","Number","first","type","START","assign","_context","event","seconds","STOP","useNow","React","setNow","clock","setInterval","clearInterval","formatTime","ms","increasing","Math","abs","s","floor","ceil","m","Timer","diff","useTimer","nosleep","NoSleep","initialState","undefined","JSON","parse","localStorage","getItem","err","App","useMachine","devTools","state","vibrate","window","navigator","current","send","service","isIdle","matches","isUnder","isOver","subscribe","setItem","stringify","unsubscribe","className","classNames","onClick","enable","disable","cross","alt","width","height","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","updateVH","document","documentElement","style","setProperty","innerHeight","addEventListener","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c7b60dc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.e9ec3cec.svg\";","import { Machine, assign } from 'xstate'\nimport { interval } from 'rxjs';\nimport { map, filter, first } from 'rxjs/operators';\n\nexport interface AppContext {\n  time: number | null;\n}\n\nconst timerSrc = (context: AppContext) => (\n  interval(1000 / 60).pipe(\n    map(() => Date.now()),\n    filter((time) => time >= Number(context.time)),\n    first(),\n    map(() => ({ type: 'DONE' })),\n  )\n);\n\nexport const machine = Machine<AppContext>({\n  id: 'machine',\n  initial: 'idle',\n  context: {\n    time: null,\n  },\n  states: {\n    idle: {},\n    timer: {\n      initial: 'under',\n      states: {\n        under: {\n          on: {\n            DONE: {\n              target: 'over',\n              actions: 'vibrate',\n            },\n          },\n        },\n        over: {},\n      },\n      invoke: {\n        src: timerSrc,\n      },\n    },\n  },\n  on: {\n    START: {\n      target: 'timer',\n      actions: assign({\n        time: (_context, event) => Date.now() + event.seconds * 1000,\n      }),\n    },\n    STOP: {\n      target: 'idle',\n    },\n  },\n});\n","import * as React from 'react';\r\n\r\nexport const useNow = (interval = 1000 / 60) => {\r\n  const [now, setNow] = React.useState(Date.now());\r\n\r\n  React.useEffect(() => {\r\n    const clock = setInterval(() => {\r\n      setNow(Date.now());\r\n    }, interval);\r\n    return () => clearInterval(clock);\r\n  }, [interval]);\r\n\r\n  return now;\r\n};\r\n","export const formatTime = (ms: number, increasing = ms >= 0) => {\r\n  ms = Math.abs(ms);\r\n  let s = increasing ? Math.floor(ms / 1000) : Math.ceil(ms / 1000);\r\n  const m = Math.floor(s / 60);\r\n  s %= 60;\r\n  return `${m}:${s < 10 ? '0' : ''}${s}`;\r\n};\r\n","import * as React from 'react';\r\nimport { useTimer } from './use-timer';\r\n\r\nexport interface Props {\r\n  time: number;\r\n}\r\n\r\nconst Timer: React.FC<Props> = ({ time }) => {\r\n  const timer = useTimer(time);\r\n  return <>{timer}</>;\r\n};\r\n\r\nexport default Timer;\r\n","import { useNow } from './use-now';\r\nimport { formatTime } from './format-time';\r\n\r\nexport const useTimer = (time: Date | number) => {\r\n  const now = useNow();\r\n  const diff = now - Number(time);\r\n  return formatTime(diff);\r\n};\r\n","import * as React from 'react';\nimport { useMachine } from '@xstate/react'\nimport { StateConfig, AnyEventObject } from 'xstate';\nimport classNames from 'classnames';\nimport NoSleep from 'nosleep.js';\nimport { machine, AppContext } from './machine';\nimport { useNow } from './use-now';\nimport { formatTime } from './format-time';\nimport Timer from './Timer';\nimport cross from './cross.svg';\nimport './App.css';\n\nconst nosleep = new NoSleep();\n\nlet initialState: StateConfig<AppContext, AnyEventObject> | undefined = undefined;\n\ntry {\n  initialState = JSON.parse(localStorage.getItem('rest/state') || '');\n} catch (err) {}\n\nconst App: React.FC = () => {\n  const now = useNow();\n  const [current, send, service] = useMachine(machine, {\n    devTools: true,\n    state: initialState,\n    actions: {\n      vibrate: () => window.navigator.vibrate(750),\n    },\n  });\n  const isIdle = current.matches('idle');\n  const isUnder = current.matches({ timer: 'under' });\n  const isOver = current.matches({ timer: 'over' });\n  React.useEffect(() => {\n    const subscription = service.subscribe((state) => {\n      try {\n        localStorage.setItem('rest/state', JSON.stringify(state));\n      } catch (err) {}\n    });\n    return subscription.unsubscribe;\n  }, [service]);\n  return (\n    <div\n      className={classNames('App', {\n        'App--idle': isIdle,\n        'App--under': isUnder,\n        'App--over': isOver,\n        'App--long': (\n          current.context.time !== null && (\n            current.context.time > now ?\n              current.context.time - now >= 599000 :\n              now - current.context.time >= 600000\n          )\n        ),\n      })}>\n      <div className=\"App-time-buttons\">\n        <button\n          className=\"App-time-button\"\n          type=\"button\"\n          onClick={() => {\n            try {\n              nosleep.enable();\n            } catch (err) {}\n            send('START', { seconds: 120 });\n          }}\n        >\n          <span className=\"App-time-button-text\">{formatTime(120 * 1000)}</span>\n        </button>\n        <button\n          className=\"App-time-button\"\n          type=\"button\"\n          onClick={() => {\n            try {\n              nosleep.enable();\n            } catch (err) {}\n            send('START', { seconds: 90 });\n          }}\n        >\n          <span className=\"App-time-button-text\">{formatTime(90 * 1000)}</span>\n        </button>\n        <button\n          className=\"App-time-button\"\n          type=\"button\"\n          onClick={() => {\n            try {\n              nosleep.enable();\n            } catch (err) {}\n            send('START', { seconds: 60 });\n          }}\n        >\n          <span className=\"App-time-button-text\">{formatTime(60 * 1000)}</span>\n        </button>\n      </div>\n      <div className=\"App-content\">\n        {!isIdle && current.context.time && (\n          <span className=\"App-timer\">\n            <Timer time={current.context.time} />\n          </span>\n        )}\n        <button\n          className=\"App-reset\"\n          type=\"button\"\n          onClick={() => {\n            try {\n              nosleep.disable();\n            } catch (err) {}\n            send('STOP');\n          }}>\n          <img className=\"App-reset-icon\" src={cross} alt=\"Stop\" width=\"16\" height=\"16\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** See https://css-tricks.com/the-trick-to-viewport-units-on-mobile/ */\r\nexport const updateVH = () => document.documentElement.style.setProperty('--vh', window.innerHeight * 0.01 + 'px');\r\n\r\nwindow.addEventListener('resize', updateVH);\r\n\r\nupdateVH();\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './update-vh'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}